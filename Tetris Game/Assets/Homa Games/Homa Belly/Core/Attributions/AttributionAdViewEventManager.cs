using System;
using System.Collections.Generic;
using System.Globalization;
using HomaGames.Geryon;
using UnityEngine;

namespace HomaGames.HomaBelly
{
    /// <summary>
    ///     <p>Manager class listening ad events and sending `af_ad_view` events to any implemented attribution platform.</p>
    ///     <p>
    ///         This event represents the revenue generated by ad impressions and obey a set of rules regards how and
    ///         when to send the event.
    ///     </p>
    /// </summary>
    internal class AttributionAdViewEventManager
    {
        /// <summary>
        ///     Determines the cadence of the event firing. This is, sending one `af_ad_view` event per each
        ///     ad impression event or bundle N ad impression events into one `af_ad_view`, aggregating values.
        ///     Parameter {0} will be replaced by the corresponding ad type (banner, interstitial, rewardedvideo)
        /// </summary>
        private const string DvrKeyEventTriggerCadence = "I_AF_AD_VIEW_{0}_TRIGGER_CADENCE";

        /// <summary>
        ///     Determines the minimum value the `af_ad_view` events should reach before being sent to attribution
        ///     Parameter {0} will be replaced by the corresponding ad type (banner, interstitial, rewardedvideo)
        /// </summary>
        private const string DvrKeyEventTriggerValueThreshold = "F_AF_AD_VIEW_{0}_TRIGGER_VALUE_THRESHOLD";

        /// <summary>
        ///     Determines if the `af_ad_view` event feature is enabled or not
        ///     Parameter {0} will be replaced by the corresponding ad type (banner, interstitial, rewardedvideo)
        /// </summary>
        private const string DvrKeyEventTriggerEnabled = "B_AF_AD_VIEW_{0}_TRIGGER_ENABLED";

        private const string BannerType = "banner";
        private const string InterstitialType = "interstitial";
        private const string RewardedVideoType = "rewarded_video";

        private readonly Observable<int> _bannerCadenceObservable;
        private readonly Observable<bool> _bannerEnabledObservable;
        private readonly Observable<double> _bannerThresholdObservable;
        private readonly Observable<int> _interstitialCadenceObservable;
        private readonly Observable<bool> _interstitialEnabledObservable;
        private readonly Observable<double> _interstitialThresholdObservable;
        private readonly Observable<int> _rewardedVideoCadenceObservable;
        private readonly Observable<bool> _rewardedVideoEnabledObservable;
        private readonly Observable<double> _rewardedVideoThresholdObservable;

        internal AttributionAdViewEventManager()
        {
            // Banners
            Config.DvrDatabase.Ints.TryGet(string.Format(DvrKeyEventTriggerCadence, BannerType.ToUpperInvariant()),
                out _bannerCadenceObservable);
            Config.DvrDatabase.Doubles.TryGet(
                string.Format(DvrKeyEventTriggerValueThreshold, BannerType.ToUpperInvariant()),
                out _bannerThresholdObservable);
            Config.DvrDatabase.Booleans.TryGet(string.Format(DvrKeyEventTriggerEnabled, BannerType.ToUpperInvariant()),
                out _bannerEnabledObservable);

            // Interstitials
            Config.DvrDatabase.Ints.TryGet(
                string.Format(DvrKeyEventTriggerCadence, InterstitialType.ToUpperInvariant()),
                out _interstitialCadenceObservable);
            Config.DvrDatabase.Doubles.TryGet(
                string.Format(DvrKeyEventTriggerValueThreshold, InterstitialType.ToUpperInvariant()),
                out _interstitialThresholdObservable);
            Config.DvrDatabase.Booleans.TryGet(
                string.Format(DvrKeyEventTriggerEnabled, InterstitialType.ToUpperInvariant()),
                out _interstitialEnabledObservable);

            // Rewarded Videos
            Config.DvrDatabase.Ints.TryGet(
                string.Format(DvrKeyEventTriggerCadence, RewardedVideoType.ToUpperInvariant()),
                out _rewardedVideoCadenceObservable);
            Config.DvrDatabase.Doubles.TryGet(
                string.Format(DvrKeyEventTriggerValueThreshold, RewardedVideoType.ToUpperInvariant()),
                out _rewardedVideoThresholdObservable);
            Config.DvrDatabase.Booleans.TryGet(
                string.Format(DvrKeyEventTriggerEnabled, RewardedVideoType.ToUpperInvariant()),
                out _rewardedVideoEnabledObservable);
        }

        /// <summary>
        ///     Method invoked everytime an ad revenue events happens within the game
        /// </summary>
        /// <param name="adRevenueData">The Ad revenue data generated by the ad impression</param>
        public void OnAdRevenue(AdRevenueData adRevenueData)
        {
            // 1. Identify the ad type (banner, is or rw)
            var adType = adRevenueData.AdType;

            // 2. Check remote configuration rules for triggering
            var cadenceValue = GetRemoteConfigCadenceForAdType(adType);
            var thresholdValue = GetRemoteConfigThresholdForAdType(adType);
            var enabledValue = GetRemoteConfigEnabledForAdType(adType);

            // 3. Obey remote configuration rules
            if (!enabledValue)
                return;

            // Trigger one `af_ad_view` per each ad impression event
            if (cadenceValue <= 1)
            {
                // If value threshold allows us to send this event, send it. Otherwise ignore the event
                if (adRevenueData.Revenue >= thresholdValue)
                    SendEvent(adType, adRevenueData.Revenue);
            }
            else
            {
                // Aggregate `cadenceValue` ad impression events into one `af_ad_view` event
                var cadenceKey = GetPlayerPrefsKeyForAccumulatedDisplayForAdType(adType);
                var revenueKey = GetPlayerPrefsKeyForAccumulatedRevenueForAdType(adType);
                PlayerPrefs.SetInt(cadenceKey, PlayerPrefs.GetInt(cadenceKey, 0) + 1);
                var persistedValue = double.Parse(PlayerPrefs.GetString(revenueKey, "0"), CultureInfo.InvariantCulture);
                PlayerPrefs.SetString(revenueKey,
                    (persistedValue + adRevenueData.Revenue).ToString(CultureInfo.InvariantCulture));

                // Process accumulated revenues and persist the result
                ProcessAccumulatedAdRevenues(adType, cadenceValue, thresholdValue);
            }
        }

        private bool GetRemoteConfigEnabledForAdType(string adType)
        {
            switch (adType)
            {
                case BannerType:
                    if (_bannerEnabledObservable != null)
                        return _bannerEnabledObservable.Value;
                    break;
                case InterstitialType:
                    if (_interstitialEnabledObservable != null)
                        return _interstitialEnabledObservable.Value;
                    break;
                case RewardedVideoType:
                    if (_rewardedVideoEnabledObservable != null)
                        return _rewardedVideoEnabledObservable.Value;
                    break;
            }

            return true;
        }

        private int GetRemoteConfigCadenceForAdType(string adType)
        {
            switch (adType)
            {
                case BannerType:
                    if (_bannerCadenceObservable != null)
                        return Math.Max(0, _bannerCadenceObservable.Value);
                    break;
                case InterstitialType:
                    if (_interstitialCadenceObservable != null)
                        return Math.Max(0, _interstitialCadenceObservable.Value);
                    break;
                case RewardedVideoType:
                    if (_rewardedVideoCadenceObservable != null)
                        return Math.Max(0, _rewardedVideoCadenceObservable.Value);
                    break;
            }

            return 1;
        }

        private double GetRemoteConfigThresholdForAdType(string adType)
        {
            switch (adType)
            {
                case BannerType:
                    if (_bannerThresholdObservable != null)
                        return Math.Max(0, _bannerThresholdObservable.Value);
                    break;
                case InterstitialType:
                    if (_interstitialThresholdObservable != null)
                        return Math.Max(0, _interstitialThresholdObservable.Value);
                    break;
                case RewardedVideoType:
                    if (_rewardedVideoThresholdObservable != null)
                        return Math.Max(0, _rewardedVideoThresholdObservable.Value);
                    break;
            }

            return 0;
        }

        private string GetPlayerPrefsKeyForAccumulatedDisplayForAdType(string adType)
        {
            return $"homa_{adType}_accumulated_display";
        }

        private string GetPlayerPrefsKeyForAccumulatedRevenueForAdType(string adType)
        {
            return $"homa_{adType}_accumulated_revenue";
        }

        /// <summary>
        ///     Based on persisted values and remote configuration, decide if `af_ad_view` event should
        ///     be sent within the current ad impression event or keep aggregating its values
        /// </summary>
        /// <param name="adType">The ad type: banner, interstitial or rewarded_video</param>
        /// <param name="cadenceValue">The remotely configured cadence value</param>
        /// <param name="thresholdValue">The remotely configured threshold value</param>
        private void ProcessAccumulatedAdRevenues(string adType, int cadenceValue, double thresholdValue)
        {
            var cadenceKey = GetPlayerPrefsKeyForAccumulatedDisplayForAdType(adType);
            var revenueKey = GetPlayerPrefsKeyForAccumulatedRevenueForAdType(adType);

            var persistedCadence = PlayerPrefs.GetInt(cadenceKey, 0);
            var persistedRevenue = double.Parse(PlayerPrefs.GetString(revenueKey, "0"), CultureInfo.InvariantCulture);


            // Desired cadence reached, fire event
            if (persistedCadence == cadenceValue)
            {
                // If revenue value is above desired threshold, fire event
                if (persistedRevenue >= thresholdValue)
                    SendEvent(adType, persistedRevenue);

                // Besides revenue being above desired threshold or not, we reached desired cadence
                // and it has higher priority, so we clear the accumulated values
                PlayerPrefs.SetInt(cadenceKey, 0);
                PlayerPrefs.SetString(revenueKey, "0");
            }
        }

        /// <summary>
        ///     Send the `af_ad_view` event to all attribution platforms with `ad_type` and `revenue`
        ///     as partner parameters
        /// </summary>
        /// <param name="adType"></param>
        /// <param name="adRevenue"></param>
        private void SendEvent(string adType, double adRevenue)
        {
            HomaBelly.Instance.TrackAttributionEventWithPartnerParameters("af_ad_view", new Dictionary<string, object>
            {
                {"ad_type", adType},
                {"revenue", adRevenue.ToString(CultureInfo.InvariantCulture)}
            });
        }
    }
}